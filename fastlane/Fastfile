# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

ENV["FASTLANE_USER"] = "jedi19931106@icloud.com"
ENV["FASTLANE_TEAM_ID"] = "QRN2TFCH8G"
ENV["MATCH_GIT_URL"] = "git@github.com:rsZWang/Blablablock-iOS-certificate.git"
ENV["MATCH_PASSWORD"] = "blablablock2022"

# Configuration to build an app
# minimum requirment to pack an app
Configuration = Struct.new(
  :provisioningProfile, # file name of the provisioning profile
  :buildConfiguration, # configuration name in xcode project
  :appIdentifier, # the app id for this configuration
  :exportMethod, # export methods, such as "ad-doc" or "appstore"
  :productName, # product name of config
  :scheme, # scheme to build ipa
  :matchType # type to use match, type is adhoc, appstore and so on.
) 

@development = Configuration.new(
  "match Development com.wuchi.blablablock",
  "Debug",
  "com.wuchi.blablablock-dev",
  "development",
  "BlablaBlock-dev",
  "Development",
  "development"
)

@release = Configuration.new(
  "match AppStore com.wuchi.blablablock",
  "Release",
  "com.wuchi.blablablock",
  "app-store",
  "BlablaBlock",
  "BlablaBlock",
  "appstore"
)

@proj = "BlablaBlock.xcodeproj"
@version = get_version_number(xcodeproj: @proj)
@build_number = get_build_number(xcodeproj: @proj)
@build_dir = "builds/#{@version}_#{@build_number}"
@workspace = "BlablaBlock.xcworkspace"
@scheme = "BlablaBlock"

@review_notes = "
測試連結交易所請使用 Binance:
API KEY: tuXwcjGeJC4vCpdUez0mZxJJEOSqBBSJc60MCGcXeQg0CWPvufmndvQdEwgwvNnV
API Secret: CHpW8MZwBuBHuPncE2KIN78gH06tpTCJ0JIrpt7PWXcC2i6yBRkMiZaIUVspIUqL
"

@changelog = "
新版UI
"

default_platform(:ios)

platform :ios do
  # desc "Push a new release build to the App Store"
  # lane :release do
  #   increment_build_number(xcodeproj: "BlablaBlock.xcodeproj")
  #   build_app(workspace: "BlablaBlock.xcworkspace", scheme: "BlablaBlock")
  #   upload_to_app_store
  # end

  # desc "Upload ipa to Testflight"
  # lane :beta do
  #   build_app(workspace: "BlablaBlock.xcworkspace", scheme: "BlablaBlock")
  #   pilot(
  #     ipa: "BlablaBlock.ipa",
  #     skip_submission: true,
  #     skip_waiting_for_build_processing: true
  #   )
  # end

  # desc "Download and upload and clear dsyms"
  # lane :harry_dsyms do
  #   upload_dsyms(version, build_number)
  # end

  # desc "Build and upload to testflight"
  # lane :harry_build_testflight do
  #   build_testflight(workspace, scheme, build_number)
  # end

  # desc "Download and upload and clear dsyms"
  # lane :harry_slack do
  #   notify_slack(version, build_number)
  # end

  desc "Clear build directory, get certificates, build and upload to testflight, download dsyms on store, upload store and local dsyms, clear"
  lane :harry do
    clear_dir
    build
    upload_submit_testflight
    harry_post
  end

  desc "Upload dSYMs, notify slack"
  lane :harry_post do
    upload_store_dsyms
    upload_local_dsyms
    notify_slack_success
  end

  desc "Clear build directory"
  lane :clear_dir do
    sh "rm -r ./../#{@build_dir} | echo"
    sh "mkdir -p ./../#{@build_dir}"
  end

  desc "Build"
  lane :build do
    ensure_git_status_clean
    archive(@release)
  end

  def archive(type)
    build_app(
      workspace: @workspace, 
      scheme: type.scheme,
      clean: true,
      output_directory: @build_dir,
      configuration: type.buildConfiguration,
      silent: true,
      include_symbols: true,
      include_bitcode: false,
      # export_method: "app-store",
      # export_options: {
      #   provisioningProfiles: { 
      #     type.appIdentifier => type.provisioningProfiles
      #   }
      # }
    )
  end

  desc "Upload to testflight and submit beta review"
  lane :upload_submit_testflight do
    pilot(
      ipa: "#{@build_dir}/BlablaBlock.ipa",
      beta_app_review_info: {
        contact_email: "jedi19931106@icloud.com",
        contact_first_name: "Harry",
        contact_last_name: "Wang",
        contact_phone: "+886978077059",
        demo_account_name: "test_user@blablablock.com",
        demo_account_password: "Abc123",
        notes: @review_notes
      },
      # distribute_external: true,
      # groups: "External_1",
      changelog: @changelog
    )
  end

  desc "Upload dSYMs"
  lane :upload_dsyms do 
    upload_store_dsyms
    upload_local_dsyms
  end

  desc "Upload store dSYMs"
  lane :upload_store_dsyms do
    download_dsyms(
      version: @version, 
      build_number: @build_number,
      output_directory: "./dSYMs"
    )
    upload_symbols_to_crashlytics(
      gsp_path: "./BlablaBlock/GoogleService-Info.plist"
    )
  end

  desc "Upload local dSYMs"
  lane :upload_local_dsyms do
    upload_symbols_to_crashlytics(
      dsym_path: "#{@build_dir}/BlablaBlock.app.dSYM.zip",
      gsp_path: "./BlablaBlock/GoogleService-Info.plist"
    )
  end

  desc "Notify slack build uploaded successfully message"
  lane :notify_slack_success do
    slack(
      message: "Build #{@version}/#{@build_number} uploaded!",
      slack_url: "https://hooks.slack.com/services/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"
    )
  end

  desc "Fetch certificates"
  lane :fetch_cert do
    match_config(@development, false)
    match_config(@release, false)
  end

  desc "Register devices and fetch certificates"
  lane :register_fetch_cert do
    register_devices(
      devices_file: "fastlane/devices.txt",
      team_id: "QRN2TFCH8G"
    )
    match_config(@development, true)
    match_config(@release, true)
  end

  def match_config(config, isUpdateDevice)
    match(
      type: config.matchType,
      readonly: !isUpdateDevice,    # Only fetch existing certificates and profiles, don't generate new ones
      generate_apple_certs: true,
      app_identifier: config.appIdentifier,
      force: true,
      force_for_new_devices: isUpdateDevice    # Renew the provisioning profiles if the device count on the developer portal has changed. Ignored for profile type 'appstore'
    )
  end
end