# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

proj = "BlablaBlock.xcodeproj"
version = get_version_number(xcodeproj: proj)
build_number = get_build_number(xcodeproj: proj)
build_dir = "builds/#{version}_#{build_number}"
workspace = "BlablaBlock.xcworkspace"
scheme = "BlablaBlock"

default_platform(:ios)

platform :ios do
  desc "Push a new release build to the App Store"
  lane :release do
    increment_build_number(xcodeproj: "BlablaBlock.xcodeproj")
    build_app(workspace: "BlablaBlock.xcworkspace", scheme: "BlablaBlock")
    upload_to_app_store
  end
end

platform :ios do
  desc "Upload ipa to Testflight"
  lane :beta do
    build_app(workspace: "BlablaBlock.xcworkspace", scheme: "BlablaBlock")
    pilot(
      ipa: "BlablaBlock.ipa",
      skip_submission: true,
      skip_waiting_for_build_processing: true
    )
  end
end

platform :ios do
  desc "Build, upload_to_testflight, download dsyms, upload dsyms, clear dsyms"
  lane :harry do
    cleanDir(build_dir)

    build_testflight(workspace, scheme, build_number)

    upload_dsyms(version, build_number)
  end
end

platform :ios do
  desc "Build and upload to testflight"
  lane :harry_build_testflight do
    build_testflight(workspace, scheme, build_number)
  end
end

platform :ios do
  desc "Download and upload and clear dsyms"
  lane :harry_dsyms do
    upload_dsyms(version, build_number)
  end
end

def cleanDir(build_dir)
  sh "pwd"
  sh "rm -r ./../#{build_dir} | echo"
  sh "mkdir ./../#{build_dir}"
end

def build_testflight(workspace, scheme, build_dir)
  build_app(
    workspace: workspace, 
    scheme: scheme,
    clean: true,
    output_directory: build_dir,
    include_symbols: true,
    include_bitcode: true
  )

  pilot(
    ipa: "#{build_dir}/BlablaBlock.ipa",
    skip_submission: true,
    skip_waiting_for_build_processing: true
  )
end

def upload_dsyms(version, build_number)
  download_dsyms(
      version: version, 
      build_number: build_number,
      output_directory: "./dSYMs"
    )
    upload_symbols_to_crashlytics(
      gsp_path: "./BlablaBlock/GoogleService-Info.plist"
    )
    clean_build_artifacts
end